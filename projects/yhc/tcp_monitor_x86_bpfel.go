// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type tcp_monitorStatsKey struct {
	_       structs.HostLayout
	Ifindex uint32
}

type tcp_monitorTcpStats struct {
	_             structs.HostLayout
	Packets       uint64
	Bytes         uint64
	SynPackets    uint64
	SynAckPackets uint64
	FinPackets    uint64
	RstPackets    uint64
}

// loadTcp_monitor returns the embedded CollectionSpec for tcp_monitor.
func loadTcp_monitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Tcp_monitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tcp_monitor: %w", err)
	}

	return spec, err
}

// loadTcp_monitorObjects loads tcp_monitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tcp_monitorObjects
//	*tcp_monitorPrograms
//	*tcp_monitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTcp_monitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTcp_monitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tcp_monitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcp_monitorSpecs struct {
	tcp_monitorProgramSpecs
	tcp_monitorMapSpecs
	tcp_monitorVariableSpecs
}

// tcp_monitorProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcp_monitorProgramSpecs struct {
	TcEgress *ebpf.ProgramSpec `ebpf:"tc_egress"`
}

// tcp_monitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcp_monitorMapSpecs struct {
	TcpStatsMap *ebpf.MapSpec `ebpf:"tcp_stats_map"`
}

// tcp_monitorVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcp_monitorVariableSpecs struct {
}

// tcp_monitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTcp_monitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcp_monitorObjects struct {
	tcp_monitorPrograms
	tcp_monitorMaps
	tcp_monitorVariables
}

func (o *tcp_monitorObjects) Close() error {
	return _Tcp_monitorClose(
		&o.tcp_monitorPrograms,
		&o.tcp_monitorMaps,
	)
}

// tcp_monitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTcp_monitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcp_monitorMaps struct {
	TcpStatsMap *ebpf.Map `ebpf:"tcp_stats_map"`
}

func (m *tcp_monitorMaps) Close() error {
	return _Tcp_monitorClose(
		m.TcpStatsMap,
	)
}

// tcp_monitorVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadTcp_monitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcp_monitorVariables struct {
}

// tcp_monitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTcp_monitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcp_monitorPrograms struct {
	TcEgress *ebpf.Program `ebpf:"tc_egress"`
}

func (p *tcp_monitorPrograms) Close() error {
	return _Tcp_monitorClose(
		p.TcEgress,
	)
}

func _Tcp_monitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcp_monitor_x86_bpfel.o
var _Tcp_monitorBytes []byte
