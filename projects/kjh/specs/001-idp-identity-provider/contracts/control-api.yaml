openapi: 3.0.3
info:
  title: VPN 라우터 제어 플레인 API
  description: |
    IDP/RBAC 기반 Site-to-Site VPN 라우터의 제어 플레인 관리 API.
    이 API는 정책 관리, VPN 세션 제어, 모니터링 기능을 제공합니다.
  version: 1.0.0
  contact:
    name: VPN Router Team
    url: https://github.com/your-org/vpn-router

servers:
  - url: http://localhost:9090/api/v1
    description: 로컬 개발 서버
  - url: https://vpn-router.example.com/api/v1
    description: 프로덕션 서버

security:
  - bearerAuth: []

tags:
  - name: policies
    description: RBAC 정책 관리
  - name: sessions
    description: VPN 세션 관리
  - name: idp
    description: IDP 통합 관리
  - name: monitoring
    description: 시스템 모니터링 및 헬스체크
  - name: maps
    description: eBPF 맵 관리

paths:
  # =========================================================================
  # 헬스체크 및 상태
  # =========================================================================
  /health:
    get:
      summary: 시스템 헬스체크
      description: 데몬 상태, eBPF 프로그램 로드 상태, IDP 연결 상태 확인
      tags: [monitoring]
      security: []
      responses:
        '200':
          description: 시스템 정상
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: 시스템 이상
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /status:
    get:
      summary: 상세 시스템 상태
      description: eBPF 프로그램 통계, 맵 사용률, VPN 세션 정보 포함
      tags: [monitoring]
      responses:
        '200':
          description: 상태 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'

  # =========================================================================
  # 정책 관리
  # =========================================================================
  /policies:
    get:
      summary: 모든 정책 조회
      description: IP-역할 매핑 및 ACL 규칙 목록 조회
      tags: [policies]
      parameters:
        - name: role_id
          in: query
          description: 특정 역할 ID로 필터링
          schema:
            type: integer
            format: uint32
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 50
            maximum: 500
      responses:
        '200':
          description: 정책 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyListResponse'

    post:
      summary: 새 정책 추가
      description: IP-역할 매핑 또는 ACL 규칙 추가 (원자적 업데이트)
      tags: [policies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyCreateRequest'
      responses:
        '201':
          description: 정책 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyCreateResponse'
        '400':
          description: 잘못된 요청 (검증 실패)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 충돌 (중복 IP 범위 또는 역할 ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /policies/{policy_id}:
    get:
      summary: 특정 정책 조회
      tags: [policies]
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 정책 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '404':
          description: 정책을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: 정책 업데이트
      tags: [policies]
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyUpdateRequest'
      responses:
        '200':
          description: 정책 업데이트 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 정책을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: 정책 삭제
      tags: [policies]
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 정책 삭제 성공
        '404':
          description: 정책을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /policies/reload:
    post:
      summary: 정책 전체 다시 로드
      description: 설정 파일 또는 IDP에서 정책을 다시 로드하고 eBPF 맵 업데이트
      tags: [policies]
      responses:
        '200':
          description: 다시 로드 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReloadResponse'
        '500':
          description: 다시 로드 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # =========================================================================
  # VPN 세션 관리
  # =========================================================================
  /sessions:
    get:
      summary: 활성 VPN 세션 목록 조회
      tags: [sessions]
      responses:
        '200':
          description: 세션 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionListResponse'

    post:
      summary: 새 VPN 세션 시작
      description: 피어와 핸드셰이크 시작 (Noise 프로토콜)
      tags: [sessions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreateRequest'
      responses:
        '201':
          description: 세션 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{tunnel_id}:
    get:
      summary: 특정 VPN 세션 조회
      tags: [sessions]
      parameters:
        - name: tunnel_id
          in: path
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        '200':
          description: 세션 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          description: 세션을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: VPN 세션 종료
      description: 세션 키 삭제 및 피어 연결 종료
      tags: [sessions]
      parameters:
        - name: tunnel_id
          in: path
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        '204':
          description: 세션 종료 성공
        '404':
          description: 세션을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sessions/{tunnel_id}/rotate-key:
    post:
      summary: 세션 키 교체
      description: 현재 세션의 암호화 키를 새로운 키로 교체
      tags: [sessions]
      parameters:
        - name: tunnel_id
          in: path
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        '200':
          description: 키 교체 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          description: 세션을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # =========================================================================
  # IDP 통합
  # =========================================================================
  /idp/config:
    get:
      summary: IDP 설정 조회
      tags: [idp]
      responses:
        '200':
          description: 설정 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpConfig'

    put:
      summary: IDP 설정 업데이트
      tags: [idp]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdpConfigUpdate'
      responses:
        '200':
          description: 설정 업데이트 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpConfig'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /idp/sync:
    post:
      summary: IDP에서 정책 동기화
      description: IDP에서 최신 사용자/역할 정보를 가져와 정책 업데이트
      tags: [idp]
      responses:
        '200':
          description: 동기화 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResponse'
        '503':
          description: IDP 연결 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # =========================================================================
  # eBPF 맵 관리
  # =========================================================================
  /maps:
    get:
      summary: 모든 eBPF 맵 정보 조회
      tags: [maps]
      responses:
        '200':
          description: 맵 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapListResponse'

  /maps/{map_name}:
    get:
      summary: 특정 eBPF 맵 정보 조회
      tags: [maps]
      parameters:
        - name: map_name
          in: path
          required: true
          schema:
            type: string
            enum: [ip_role_map, role_acl_map, session_key_map, stats_map]
      responses:
        '200':
          description: 맵 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapInfo'
        '404':
          description: 맵을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /maps/{map_name}/dump:
    get:
      summary: eBPF 맵 전체 덤프
      description: 디버깅 및 감사를 위한 맵 내용 덤프
      tags: [maps]
      parameters:
        - name: map_name
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            enum: [json, yaml]
            default: json
      responses:
        '200':
          description: 덤프 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapDump'
            text/yaml:
              schema:
                type: string

  # =========================================================================
  # 감사 로그
  # =========================================================================
  /audit/events:
    get:
      summary: 감사 이벤트 조회
      description: 정책 위반 및 접근 이벤트 로그 조회
      tags: [monitoring]
      parameters:
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
        - name: action
          in: query
          schema:
            type: string
            enum: [allow, deny]
        - name: role_id
          in: query
          schema:
            type: integer
            format: uint32
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: 이벤트 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEventListResponse'

# =============================================================================
# 스키마 정의
# =============================================================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # -------------------------------------------------------------------------
    # 공통 스키마
    # -------------------------------------------------------------------------
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          example: POLICY_CONFLICT
        message:
          type: string
          example: IP 범위 10.0.0.0/8이 이미 존재합니다
        details:
          type: object
          additionalProperties: true

    # -------------------------------------------------------------------------
    # 헬스 및 상태
    # -------------------------------------------------------------------------
    HealthStatus:
      type: object
      required: [status, daemon_uptime_seconds]
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        daemon_uptime_seconds:
          type: integer
          format: uint64
        ebpf_programs_loaded:
          type: boolean
        idp_connected:
          type: boolean
        last_policy_sync:
          type: string
          format: date-time

    SystemStatus:
      type: object
      required: [health, programs, maps, sessions]
      properties:
        health:
          $ref: '#/components/schemas/HealthStatus'
        programs:
          type: object
          properties:
            xdp:
              $ref: '#/components/schemas/ProgramStats'
            tc_ingress:
              $ref: '#/components/schemas/ProgramStats'
            tc_egress:
              $ref: '#/components/schemas/ProgramStats'
        maps:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MapInfo'
        sessions:
          type: object
          properties:
            active_count:
              type: integer
            total_packets_encrypted:
              type: integer
              format: uint64
            total_packets_decrypted:
              type: integer
              format: uint64

    ProgramStats:
      type: object
      properties:
        id:
          type: integer
          format: uint32
        name:
          type: string
        interface:
          type: string
        loaded_at:
          type: string
          format: date-time
        run_count:
          type: integer
          format: uint64
        run_time_ns:
          type: integer
          format: uint64
        avg_latency_ns:
          type: integer
          format: uint64

    # -------------------------------------------------------------------------
    # 정책
    # -------------------------------------------------------------------------
    PolicyListResponse:
      type: object
      required: [policies, total, page, page_size]
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/Policy'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer

    Policy:
      type: object
      required: [id, type, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [ip_role_mapping, acl_rule]
        ip_role_mapping:
          $ref: '#/components/schemas/IpRoleMapping'
        acl_rule:
          $ref: '#/components/schemas/AclRule'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        version:
          type: integer
          format: uint64

    IpRoleMapping:
      type: object
      required: [ip_range, role_id, role_name]
      properties:
        ip_range:
          type: string
          example: 10.0.0.0/8
        role_id:
          type: integer
          format: uint32
        role_name:
          type: string
          example: admin
        expires_at:
          type: string
          format: date-time
          nullable: true
        source:
          type: string
          enum: [idp, static, dynamic]

    AclRule:
      type: object
      required: [rule_id, role_id, src, dst, protocol, action]
      properties:
        rule_id:
          type: integer
          format: uint32
        role_id:
          type: integer
          format: uint32
        role_name:
          type: string
        src:
          type: string
          example: 10.0.0.0/8
        dst:
          type: string
          example: 172.16.0.0/12
        protocol:
          type: string
          enum: [any, tcp, udp, icmp]
        dst_ports:
          type: string
          example: "80,443"
          description: 단일 포트, 범위 (80-443), 또는 쉼표로 구분된 목록
        action:
          type: string
          enum: [allow, deny]
        priority:
          type: integer
          format: uint8
        bidirectional:
          type: boolean
        log_violations:
          type: boolean
        enabled:
          type: boolean
        description:
          type: string

    PolicyCreateRequest:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [ip_role_mapping, acl_rule]
        ip_role_mapping:
          $ref: '#/components/schemas/IpRoleMapping'
        acl_rule:
          $ref: '#/components/schemas/AclRule'

    PolicyCreateResponse:
      type: object
      required: [id, applied_at]
      properties:
        id:
          type: string
          format: uuid
        applied_at:
          type: string
          format: date-time
        ebpf_map_updated:
          type: boolean

    PolicyUpdateRequest:
      type: object
      properties:
        ip_role_mapping:
          $ref: '#/components/schemas/IpRoleMapping'
        acl_rule:
          $ref: '#/components/schemas/AclRule'

    ReloadResponse:
      type: object
      required: [reloaded_at, policies_loaded]
      properties:
        reloaded_at:
          type: string
          format: date-time
        policies_loaded:
          type: integer
        errors:
          type: array
          items:
            type: string

    # -------------------------------------------------------------------------
    # VPN 세션
    # -------------------------------------------------------------------------
    SessionListResponse:
      type: object
      required: [sessions, total]
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/Session'
        total:
          type: integer

    Session:
      type: object
      required: [tunnel_id, peer_ip, state, created_at]
      properties:
        tunnel_id:
          type: integer
          format: uint32
        peer_ip:
          type: string
          format: ipv4
        state:
          type: string
          enum: [init, handshake_in_progress, established, expired, error]
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        last_activity:
          type: string
          format: date-time
        stats:
          type: object
          properties:
            packets_encrypted:
              type: integer
              format: uint64
            packets_decrypted:
              type: integer
              format: uint64
            replay_detected:
              type: integer
              format: uint64
            auth_failures:
              type: integer
              format: uint64
        key_rotation_count:
          type: integer

    SessionCreateRequest:
      type: object
      required: [peer_ip]
      properties:
        peer_ip:
          type: string
          format: ipv4
        tunnel_id:
          type: integer
          format: uint32
          description: 생략 시 자동 할당

    # -------------------------------------------------------------------------
    # IDP
    # -------------------------------------------------------------------------
    IdpConfig:
      type: object
      required: [provider, enabled]
      properties:
        provider:
          type: string
          enum: [oidc, saml, disabled]
        enabled:
          type: boolean
        oidc_config:
          type: object
          properties:
            issuer_url:
              type: string
              format: uri
            client_id:
              type: string
            client_secret:
              type: string
              writeOnly: true
            scopes:
              type: array
              items:
                type: string
        saml_config:
          type: object
          properties:
            idp_metadata_url:
              type: string
              format: uri
            entity_id:
              type: string
        sync_interval_seconds:
          type: integer
          default: 300

    IdpConfigUpdate:
      type: object
      properties:
        provider:
          type: string
          enum: [oidc, saml, disabled]
        enabled:
          type: boolean
        oidc_config:
          type: object
        saml_config:
          type: object
        sync_interval_seconds:
          type: integer

    SyncResponse:
      type: object
      required: [synced_at, users_synced]
      properties:
        synced_at:
          type: string
          format: date-time
        users_synced:
          type: integer
        roles_synced:
          type: integer
        policies_updated:
          type: integer
        errors:
          type: array
          items:
            type: string

    # -------------------------------------------------------------------------
    # eBPF 맵
    # -------------------------------------------------------------------------
    MapListResponse:
      type: object
      required: [maps]
      properties:
        maps:
          type: array
          items:
            $ref: '#/components/schemas/MapInfo'

    MapInfo:
      type: object
      required: [name, type, key_size, value_size, max_entries, current_entries]
      properties:
        name:
          type: string
        type:
          type: string
          example: BPF_MAP_TYPE_LPM_TRIE
        key_size:
          type: integer
        value_size:
          type: integer
        max_entries:
          type: integer
        current_entries:
          type: integer
        usage_percent:
          type: number
          format: float
        pinned_path:
          type: string
          example: /sys/fs/bpf/vpn/ip_role_map

    MapDump:
      type: object
      required: [map_name, entries]
      properties:
        map_name:
          type: string
        dumped_at:
          type: string
          format: date-time
        entries:
          type: array
          items:
            type: object
            properties:
              key:
                type: object
              value:
                type: object

    # -------------------------------------------------------------------------
    # 감사 로그
    # -------------------------------------------------------------------------
    AuditEventListResponse:
      type: object
      required: [events, total, page, page_size]
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/AuditEvent'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer

    AuditEvent:
      type: object
      required: [timestamp, event_type, src, dst, action]
      properties:
        timestamp:
          type: string
          format: date-time
        event_type:
          type: string
          enum: [policy_violation, policy_allow, no_role_found, map_lookup_error, decryption_failure]
        src:
          type: object
          properties:
            ip:
              type: string
              format: ipv4
            port:
              type: integer
        dst:
          type: object
          properties:
            ip:
              type: string
              format: ipv4
            port:
              type: integer
        protocol:
          type: string
        role_id:
          type: integer
          format: uint32
        role_name:
          type: string
        rule_id:
          type: integer
          format: uint32
          nullable: true
        action:
          type: string
          enum: [allow, deny]
        hook_point:
          type: string
          enum: [xdp, tc_ingress, tc_egress]
        metadata:
          type: object
          properties:
            decrypted:
              type: boolean
            cached_policy:
              type: boolean
            multi_role:
              type: boolean
            latency_us:
              type: integer
              format: uint64
